{"version":3,"sources":["Components/AddCategory.js","Components/GifGridItem.js","helpers/getGifs.js","Components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","console","log","useFetchGifs","GifExpertApp","props","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAoB5C,OACI,sBAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAE1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,MAMlB,SACI,uBACQO,KAAK,OACLC,MAAOT,EACPU,SArBU,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,a,QCRlBG,EAAc,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,MAAMC,EAAS,EAATA,IAG/B,OACI,sBAAKC,UAAU,yCAAf,UACI,qBAAKC,IAAMF,EAAKG,IAAMJ,IACtB,4BAAIA,Q,uBCPHK,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbN,EAFa,iDAEmCO,UAAUF,GAF7C,+DAGAG,MAAMR,GAHN,cAGbS,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EACxB,MAAO,CACHC,GAAID,EAAIC,GACRhB,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIE,cAAN,aAAE,EAAYC,iBAAiBjB,QAVvB,kBAcZY,GAdY,4CAAH,sDCKPM,EAAU,SAAC,GAAgB,IAAfb,EAAc,EAAdA,SAAc,ECHX,SAACA,GAAc,IAAD,EAEZpB,mBAAS,CAC/B0B,KAAM,GACNQ,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAwBtC,OAhBAC,qBAAU,WACNlB,EAAQC,GACHkB,MAAK,SAAAC,GAGFC,QAAQC,IAAIF,GACZH,EAAS,CACLV,KAAMa,EACNL,SAAS,SAMvB,CAACd,IAEIe,EDjBwBO,CAAatB,GAA/BW,EAJsB,EAI5BL,KAAaQ,EAJe,EAIfA,QAGpB,OACI,qCACI,oBAAIlB,UAAU,oCAAd,SAAmDI,IAElDc,GAAW,mBAAGlB,UAAU,mCAAb,qBAEZ,qBAAKA,UAAU,YAAf,SAEQe,EAAOH,KAAI,SAACC,GAAD,OACX,cAAC,EAAD,eAEYA,GADCA,EAAIC,aEiBtBa,EAnCM,SAAAC,GAAU,IAAD,EAEU5C,mBAAS,CAAC,gBAFpB,mBAEnB6C,EAFmB,KAEP9C,EAFO,KAY1B,OACI,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAGA,6BAEQ8C,EAAWjB,KAAI,SAAAR,GAAQ,OACrB,cAAC,EAAD,CAEAA,SAAUA,GADHA,Y,MCrB3B0B,IAASC,OAAO,cAAC,EAAD,IACdC,SAASC,eAAe,W","file":"static/js/main.eaecb478.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\n\nexport const AddCategory = ({setCategories}) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) =>{\n        // console.log(e.target.value); -> este es valor que tiene la caja del input\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) =>{\n        e.preventDefault(); //esto evita que al apretar enter se refresque por completo la pagina\n\n        if(inputValue.trim().length > 2){\n            // console.log('Submit hecho');\n            setCategories(cats => [inputValue,...cats]);\n            setInputValue('');\n        }\n        \n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input \n                    type=\"text\"\n                    value={inputValue}\n                    onChange={handleInputChange}></input>\n        </form>      \n    )\n}\n\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","import React from 'react'\n\nexport const GifGridItem = ({title,url}) => {\n\n    // console.log(title,url);\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src= {url} alt ={title} />\n            <p>{title}</p>\n        </div>\n    )\n}\n","\nexport const getGifs = async(category) =>{\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=VJ7GTWT3WyvYSVokKtjd73A0Rsa8DwiR`; //encodeURI() nos permite juntar las palabras las palabras en los urls cuando tienen espacios, ej: %20\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n\n    const gifs = data.map(img =>{\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n\n}","// import React, { useState, useEffect } from 'react'\n\nimport { GifGridItem } from './GifGridItem';\n\nimport { useFetchGifs } from \"../hooks/useFetchGifs\"\n\nexport const GifGrid = ({category}) => {\n\n    // const [images, setImages] = useState([]);    \n    \n    const {data: images,loading} = useFetchGifs(category);\n    \n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n\n            {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\n\n            <div className=\"card-grid\">\n                {\n                    images.map((img) => (\n                    <GifGridItem \n                            key={img.id}\n                            {...img}\n                        />\n                    ))\n                    \n                }\n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport {getGifs} from '../helpers/getGifs'\n\nexport const useFetchGifs = (category) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    \n    useEffect(()=>{\n        getGifs(category)\n            .then(imgs=>{\n\n            \n                console.log(imgs);\n                setState({\n                    data: imgs,\n                    loading: false\n                })\n               \n\n              \n            })\n    },[category])\n\n    return state; //{data: [], loading: true};\n}\n","import React, { useState } from 'react'\nimport { AddCategory } from './Components/AddCategory';\nimport { GifGrid } from './Components/GifGrid';\n\n\nconst GifExpertApp = props => {\n\n    const [categories, setCategories] = useState(['Dragon Ball']);\n\n    // const handleAdd = () =>{\n    //     const nuevaSerie = 'SuperCampeones';\n\n    //     setCategories([...categories, nuevaSerie]);\n\n    //     setCategories(cats => [...cats,nuevaSerie]);\n    // }\n\n    return (\n        <>\n          <h2>GifExpertApp</h2>\n          <AddCategory setCategories={setCategories}/>\n          <hr />  \n          \n\n          <ol>\n              {\n                  categories.map(category => (\n                    <GifGrid \n                    key = {category}\n                    category={category} \n                    />\n                  ))\n              }\n          </ol>\n        </>\n    )\n}\n\n\n\nexport default GifExpertApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\n\nReactDOM.render(<GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}